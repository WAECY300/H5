 01自增和自减
	-自增++
	        -通过自增可以使变量在自身的基础上增加1
	        -对于一个变量自增以后 原变量的值会立即自增1
	        -自增分两种 后++和前++ 
		无论是前++或后++都会立即使原变量的值自增1
		不同的是后++和前++的值不同
		a++的值等于原变量的值
		++a的值等于原变量的新值
		var a=1;
		a=a+1;
		//console.log(a); 
		
		a++;//使a自增1
		a++;
		a++;
		console.log(a); 

		++a;
		++a;
		console.log(a); 

		console.log(a++); 
		console.log(++a); 
		
		var c=10;
		c++
		console.log(c++); 
			
		案例：d++ + ++d + d
	-自减
	        -通过自减可以使变量在自身的基础上减去1
	        -自减分成两种 后--和前--
		不论是前-- 还是后--都会立即使原变量的值自减1
		不同的是后--和前--的值不同
		a--是变量的原值
		--a是变量的新值
		var num=10;
		num--;
		--num
		console.log(num); 		
02逻辑运算符
	 -js中为我们提供三种逻辑运算符
	        ！非
		-！可以用来对一个值进行非运算
		-所谓非运算就是值对一个布尔值进行取反操作
		        true变false  false变true
		var a=true;
		//对a进行非运算
		a=!a;
		console.log(a);
		-如果对一个进行两次取反 它不会变化
		a=!!a;
		console.log(a);
		-如果对非布尔值进行运算 则会将其转换为布尔值然后在取反
		        利用该特点 将一个其他的数据类型转换为布尔值
		        可以为一个任意类型取两次反 将其转换为布尔值
		var b=10;
		b=!b;
		console.log(b);
		console.log(typeof b);
	        && 与
		-可以对符号两侧的值进行与运算并返回结果
		-运算规则 两个值中只要一个值为false就返回false 只有两个值都为true 才会返回true
		//如果两个值都是true则返回true
		var result=true&&true;
		console.log(result);
		//只要有一个false 就返回false
		 result=true&&false;
		 result=false&&true;
 		 result=false&&false;
		 console.log(result);
		-JS中的与为短路的与 如果第一值为false 则不会看第二个值
		true&&alert();//检查第二个
		false&&alert();//不会检查第二个
	        || 或
		-可以对符号两侧的值进行或运算并返回结果
		-运算规则
		       -两个值中只要有一个true 就返回true
		       -如果两个都为false 才返回false
		//两个都是false 则返回false
		result=false||false;
		//只要有一个true 则返回true
		result=false||true;
		result=true||false;
		result=true||true;
		 console.log(result);
		-JS中的或为短路的或 如果第一值为true 则不会看第二个值
		true&&alert();//不检查第二个
		false&&alert();//会检查第二个
	
		-非布尔值的与和或
		        -会将其转换为布尔值 然后在运算 并且返回原值
			var result=1&&2;
			console.log(result);
			-如果两只都为true 则返回后边的
			result=0&&2;
			console.log(result);
			-如果两个值有false 则返回靠前的false
		        	result=0&&NaN;
			console.log(result);
		        -运算规则
			-如果第一个值为true 则必然返回最后一个值
			-如果第一个值为false 则直接返回第一个值
			
			result=1||2;
			//如果第一个值true 则直接返回第一个值
			result=nan || 1
			//如果子一个值为false  则直接返回第二个值
		        -运算规则
			-如果第一个值为true 则直接返回最后一个值
			-如果第一个值为false 则返回第二个值
03赋值运算符=
	 -可以将符号右侧的值赋值给符号左侧的变量
	       -  =
		var a=123;
		console.log(a);

	        -   +=
		var b=10;
		b=b+5;
		b+=5;
		console.log(b);
	        -  -=
		b-=5;
		console.log(b);
	        -  *=
		b*=5;
		console.log(b);
	        -  /=
		b/=5;
		console.log(b);
	        -  %=
		b%=5;
		console.log(b);

04关系运算符
	-通过关系运算符可以比较两个值之间的大小关系 如果关系成立会返回true 如果关系不成立则返回false
	        - >大于号
		-判断符号左侧的值是否大于右侧的
		-如果关系成立 返回true 如果关系不成立返回false
	        	result=5>10;
		result=5>4;
		console.log(result);
	        - >=大于等于
		-判断符号左侧的值是否大于或等于右侧值
		-如果关系成立 返回true 如果关系不成立返回false
	        	result=5>=10;
		result=5>=4;
		console.log(result);
	        - <小于号
		-判断符号左侧的值是否小于右侧的
		-如果关系成立 返回true 如果关系不成立返回false
	        	result=5<10;
		result=5<4;
		console.log(result);
	        - >=小于等于
		-判断符号左侧的值是否小于或等于右侧值
		-如果关系成立 返回true 如果关系不成立返回false
	        	result=5<=10;
		result=5<=4;
		console.log(result);
	        -非数值的情况
		-对于非数值比较时 会将其转换为数字在比较
		console.log(1>true);
		console.log(1>=true);
		console.log(1>"0");
		console.log(1>null);
		-任何值和nan做比较都是false
		console.log(1>"hello");
		-如果符号两侧的值都是字符串  不会将其转换数字进行比较 
		会分别比较字符串中字符的Unicode编码
		console.log(“1”<"5");
		console.log(“11”<"5");
		console.log(“a”<"b");
		-如果比较的两个字符串型的数字 可能会得到不可预期的结果
		-注意 比较两个字符串型的数字时 一定要转型
		console.log(“1112312321”<+"5");
05相等运算符
	相等==
	         -用来比较两个值是否相等 如果相等返回true 否则返回false
	         -当使用==来比较两个值时 如果值的类型不同 则会自动进行转换类型 将其转换为相同类型然后在比较
		console.log(1==1);
		
		var a=10;
		console.log(a==4);

		console.log("1"==1);//true

		console.log(true=="1");
		console.log(true=="hello");
		
		console.log(null==0);
		
	        -undefined衍生自null 所以这两个值做相等判断时 会返回false
		console.log(undefined==null);
	        
	        -NaN不和任何值相等 包括它本身
		console.log(NaN=="1");
		console.log(NaN==undefined);
		console.log(NaN==NaN);

		var b=NaN;
		//判断b的值是否为NaN
		console.log(b==NaN);
		//可以通过isNaN()函数来判断一个值是否是NaN 如果该值是NaN则返回true 否则返回false
		console.log(isNaN(b));
	
	不相等 !=
	        -不相等用来判断两个值是否不相等 如果不相等返回true 否则返回false
	        -不相等也会对变量进行自动的类型转换 如果转换后相等 也会返回false
		console.log(10!=5);
		console.log(10 != 10);
		console.log('abcd' != 'abcd');

		console.log('1' != 1);
	全等===
	        -用来判断两个值是否全等 它和相等类似 不同的是它不会做自动类型转换 如果两个值类型不同直接返回false
		console.log('123'==123);
		console.log('123'===123);

		console.log(null==undefined);
		console.log(null===undefined);
	不全等!==
	        -用来判断两个值是否不全等 和不等类似 不同的是它不会做自动类型的转换 如果两个值类型不同直接返回true
		console.log('123' != 123);
		console.log('123' !== 123);
06条件运算符
	-条件运算符 也叫三元运算符
	-语法: 条件表达式？语句1：语句2
	-执行流程：条件运算符在执行时 首先对条件表达式求值 
		    如果该值为true 则执行语句1 并返回执行结果
		    如果该值为false 则执行语句2 并返回执行结果
	-如果条件表达式的求值是一个非布尔值 会将其转换为布尔值 然后在进行运算

		true?alert('语句1'):alert('语句2');
		false?alert('语句1'):alert('语句2');
		
		var a=10;
		var b=20;
		a>b?alert('a大'):alert('b大');

		var max=a>b?a:b;
		console.log(max);
		
		var c=30;
		max=max>c?max:c;
		
		//不推荐使用 不方便阅读
		max=a>b?a>c?a:c:b>c?b:c;
		max=a>b?(a>c?a:c):(b>c?b:c;)
		
		"hello"?alert('语句1'):alert('语句2');
		""?alert('语句1'):alert('语句2');
07运算符的优先级
	-,运算度 可以分割多个语句 一般在声明多个变量时使用
		var a;
		var b;
		var c;
		//使用,运算符同时声明多个变量
		var a,b,c;
		//可以同时声明多个变量并赋值
		var a=1,b=3,c=4;
		console.log(b);
	-和数学中一样 在js中运算符也有优先级
		-先乘除 后加减
		var result=1+2*3;
		
		/*
		如果||的优先级高 或者两个一样高 则应该返回3
		如果&&的优先级高 则应该返回1
		*/
		var result=1||2&&3;
		console.log(result);
		
		-在js中有一个运算符优先级的表
		-表中越靠上优先级越高 优先级越高越优先计算
		-如果优先级一样 则从左到右计算
		-可以使用（）来改变优先级
		var result=(1||2)&&3;
		

		





















































	 
