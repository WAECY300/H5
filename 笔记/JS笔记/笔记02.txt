01流程控制语句
	-JS中的程序都是从上到下一行一行执行的
	-通过流程控制语句可以控制程序执行流程 使程序可以根据一定的条件来选择执行
	-语句分类
	        ①条件判断语句
	        ②条件分支语句
	        ③循环语句	
02条件判断语句 if语句
	-使用条件判断语句可以在执行某个语句之前进行判断
	        如果条件成立才会执行语句 条件不成立则语句不执行
	-语法一
	        if(条件表达式) {
		语句
	        }
	        if语句在执行时 会先对条件表达式进行求职判断
		如果条件表达式的值为true 则执行if后的语句
		如果条件表达式的值为false 则不会执行if后的语句
		
		if（true）
		        alert（"你猜我出来吗？？"）
		if（false）
		        alert（"你猜我出来吗？？"）

		var a=11/10;
		if(a>10)
		        alert（"我就是比10大 啦啦啦"）
		        alert（"我就出啦 谁也别想管我"）
	
	        if语句只能控制紧随其后的语句的那个语句
	                如果希望if语句可以控制多条语句 可以将这些语句统一放到代码块中	
	        if语句后的代码块不是必须的 但是在开发中尽量写上代码块 即使if后只有一条语句  	
	
	-语法二
	        if(条件表达式){
		语句...
	        }else{
		语句...
	        }
	        -if...elae...语句
	                当该语句执行时 会先对if后的条件表达式进行求职判断
		        如果该值true则执行if后的语句 如果该值为false则执行else后的语句
	-语法三
	        if(条件表达式){
		语句
	         }else if(条件表达式){
		语句
	         }else if条件表达式(){
		语句
	         }else if(条件表达式){
		语句
	         }else {         语句                }
	        -if ...else if...else if...else
	                当该语句执行时 会从上到下依次对我们的条件表达式进行判断
		        如果值为true则执行当前语句 如果值为false则继续向下判断
		        如果所有的条件都不满足 则执行最后一个else后的语句
		        该语句中 只会有一个代码块被执行 一旦代码块执行了则直接结束语句

	-案例
	①从键盘输入小明的期末成绩
	    当成绩为100时 奖励一辆BMW
	    当成绩为80-99时 奖励一台iPhone15s
	    当成绩为60-80时 奖励一本参考书
	    其他时 什么奖励也没有
	    prompt()可以弹出一个提示框 该提示框中会带有一个输入框
		用户可以在文本框中输入一段内容 该函数需要一个字符串作为参数
		该字符串将作为提示框的提示文字
	    用户输入的内容将会作为函数的返回值返回 可以定义一个变量接受该内容
		var score=prompt();
	②男大当婚 女大当嫁 那么女方家长要嫁女 当然要提出一定的条件
	    高：180cm以上 富：1000万以上 帅：500以上
	    如果这三个条件同时满足 则一定嫁他
	    如果三个条件有为真的情况 则嫁吧  比上不足 比下有余
	    如果三个条件都不满足 则不嫁	
	③编写程序 由键盘输入三个整数 分别存入变量num1 num2 num3
	    对他们进行排序 并且从小到大输出
03条件分支语句 也叫switch语句
	-语法：switch(){
		case 表达式：
		        语句
		        break
		case 表达式：
		        语句
		        break
		case 表达式：
		        语句
		        break
		default：
		        语句
		        break
		}
	执行流程switch...case...语句
	        在执行时会依次将case后的表达式的值和switch后的条件表达式的值进行全等比较
	        如果比较结果为true 则从当前case处开始执行代码
		当前case后的所有代码都会执行 可以在case后跟着break关键字 
		这样可以确保只会执行当前case后的语句 而不会执行其他的case
	         如果比较结果为false 则继续相下比较
	         如果所有的比较结果都为false 则只执行default后的语句

	swicth语句与if语句的功能实际上有重复的 使用switch可以实现if的功能
	同样使用if也可以实现switch的功能 所以我们使用时可以根据自己的习惯选择

	-案例
	①对于成绩大于60分的 输出合格 低于60分的 输出不合格
	②从键盘接收整数参数 如果该数为1-7 打印对应的星期 否则打印非法参数
	③
04循环语句
	-通过循环语句可以反复的执行一段代码多次
while循环
	-语法
	        while(条件表达式){ 
		语句
  	        }
	-while语句循环时 先对条件表达式进行判断 如果值为true 则执行循环体
	        循环体执行完毕以后 继续对表达式进行判断
	        如果值为true 则继续执行循环体 以此类推
	        如果值为false 则终止循环
		var n=1;
		while(true){
		alert(n++);
		}
		将条件表达式写死为true的循环 叫做死循环 该循环不会终止 除非浏览器关闭 慎用
		可以使用break来终止循环

		var n=1;
		        while(true){
		        alert(n++);
		        if(n==10){
		        break;
		       }
		}
	
	-创建一个循环 需要三个步骤
	        -创建初始化一个变量
	        -在循环中设置一个条件表达式
	        -定义一个更新表达式 每次更新初始化变量

do...while循环
	-语法
	       do{
		语句
    	         }while(条件表达式)

	-do..whi语句执行时 会先执行循环体 
		循环体执行完毕以后 在对while后的条件表达式进行判断
		如果结果为true 则继续执行循环体 执行完毕继续判断 以此类推
		如果结果为false 则终止循环
	实际上这两个语句功能类似 不同的是while是先判断后执行 而do..while会先执行后判断
		do..while可以保证循环体至少执行一次 而while不能

	-案例
	①假设投资的几年利率为5% 试求从1000块增长到5000块 需要花费多少年
		var money=1000;
		money*=1.05;
		money*=1.05;
		money*=1.05;

		var count=0;		

		while(money<=5000){
			money*=1.05;
			count++;
		}
	②从键盘输入小明的期末成绩
	    当成绩为100时 奖励一辆BMW
	    当成绩为80-99时 奖励一台iPhone15s
	    当成绩为60-80时 奖励一本参考书
	    其他时 什么奖励也没有

for循环
	-在for循环中 为我们提供了专门的位置来方式三个表达式
	        -初始化表达式
	        -条件表达式
	        -更新表达式
	-语法：
	        for(①初始化表达式;②条件表达式;④更新表达式){
		③语句
	        }
	 -执行流程：
	        ①执行初始化表达式 初始化变量(初始化表达式只会执行一次)
	        ②执行条件表达式 判断是否执行循环
		如果为true 则执行循环
		如果为false 终止循环
	       ④执行更新表达式 更新表达式执行完毕继续重复②
	-for循环中的三个部分可以省略 也可以写在外部
	        如果在for循环中不写任何的表达式 只写两个;号 循环为死循环
		var i=0;
		for(;i<10;){
		        alert(i++);
		}
	-案例
	①打印1-100之间所有奇数之和
	②打印1-100之间所有7的倍数的个数及总和
	③水仙花数
	    水仙花数是指一个3位数 它的每个为上的数字的3次幂之和等于它本身 请打印所有的水仙花数
	④在页面中接收一个用户输入的数字 并判断该数是否是质数
	    质数：只能被1和它自身整除的数 1不是质数也不是合数 质数必须是大于1的自然数

嵌套的for循环
	①通过程序 咋页面中输出如下图形
		*
		**
		***
		****
		*****
	②打印99乘法表
	③打印出1-100之间多有的质数

break关键字可以用来退出switch或循环语句
for(var i=0;i<5;i++){
	console.log(i);
	break;
}
if(true){
	break;
}//不能在if语句中使用break和continue

for(var i=0;i<5;i++){
        console.log(i);
         if(i==2){break;}	
}

break关键字 会立即终止离他最近的那个循环语句

for(var i=0;i<5;i++){
        for(var i=0;i<5;i++){
        console.log(i);
        break;	
        }	
}

可以为循环语句创建一个lable 来标识当前的循环语句
lable:循环语句
使用break语句时 可以在break后跟着一个lable 这样break将会结束指定的循环 而不是最近的

lable:
for(var i=0;i<5;i++){
        for(var i=0;i<5;i++){
        break lable;
        console.log(i);	
        }	
}

continue关键字可以用来跳过当次循环

for(var i=0;i<5;i++){
         if(i==2){continue;}	
         console.log(i);
}

continue默认只会对离他最近的循环起作用

for(var i=0;i<5;i++){
        for(var i=0;i<5;i++){
        if(j==2){
	 continue;
         }
        console.log(i);	
        }	
}


可以为循环语句创建一个lable







